version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: mystreamingapp_postgres
    environment:
      POSTGRES_DB: mystreamingapp
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mystreamingapp_network
    restart: unless-stopped

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: mystreamingapp_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mystreamingapp_network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis123

  # Backend API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mystreamingapp_api
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/mystreamingapp
      REDIS_URL: redis://:redis123@redis:6379
    ports:
      - "5000:5000"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
      - /app/node_modules
    networks:
      - mystreamingapp_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: mystreamingapp_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
    networks:
      - mystreamingapp_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  mystreamingapp_network:
    driver: bridge